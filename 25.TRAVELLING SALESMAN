#include <stdio.h>
#include <limits.h>
#define N 4 
int tsp(int graph[][N], int pos, int visited, int dp[][1 << N]) {
    if (visited == ((1 << N) - 1)) {
        return graph[pos][0];
    }
    if (dp[pos][visited] != -1) {
        return dp[pos][visited];
    }
    int min_cost = INT_MAX;
    for (int city = 0; city < N; city++) {
        if ((visited & (1 << city)) == 0) {
            int new_cost = graph[pos][city] + tsp(graph, city, visited | (1 << city), dp);
            if (new_cost < min_cost) {
                min_cost = new_cost;
            }
        }
    }
    dp[pos][visited] = min_cost;
    return dp[pos][visited];
}
int main() {
    int graph[N][N] = {
        {0, 10, 15, 20},
        {10, 0, 35, 25},
        {15, 35, 0, 30},
        {20, 25, 30, 0}
    };
    int dp[N][1 << N];
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < (1 << N); j++) {
            dp[i][j] = -1;
        }
    }
    int result = tsp(graph, 0, 1, dp);
    printf("M.Mahesh-192210312\n");
    printf("The minimum cost to visit all cities is %d\n", result);
    return 0;
}
